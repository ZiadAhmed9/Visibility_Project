
Visibility_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000128c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  0000128c  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800108  00800108  000013c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c63  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125e  00000000  00000000  000054f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002160  00000000  00000000  00006755  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b2c  00000000  00000000  000088b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ed  00000000  00000000  000093e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027a0  00000000  00000000  0000a7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000cf71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__vector_1>
       8:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_2>
       c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_3>
      10:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_4>
      14:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_5>
      18:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_6>
      1c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_7>
      20:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_8>
      24:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 04 	call	0x890	; 0x890 <main>
      8a:	0c 94 44 09 	jmp	0x1288	; 0x1288 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seconds>:
LEFT_LIGHT_State left_light_state=LEFT_LIGHT_OFF;
RIGHT_LIGHT_State right_light_state=RIGHT_LIGHT_OFF;
u8 Back_buttons_state=NOT_PRESSED;
void seconds(void)
{
	time_in_seconds++;
      92:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_in_seconds>
      96:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_in_seconds+0x1>
      9a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_in_seconds+0x2>
      9e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_in_seconds+0x3>
      a2:	01 96       	adiw	r24, 0x01	; 1
      a4:	a1 1d       	adc	r26, r1
      a6:	b1 1d       	adc	r27, r1
      a8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <time_in_seconds>
      ac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <time_in_seconds+0x1>
      b0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <time_in_seconds+0x2>
      b4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <time_in_seconds+0x3>
      b8:	08 95       	ret

000000ba <Lighting_Init>:
}

void Lighting_Init(void)
{
	//LED_Init_interrupts();
	LED_OFF(RIGHT_LIGHT_PIN);
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
	LED_OFF(FRONT_LIGHT_PIN);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
	LED_OFF(BACK_LIGHT_PIN);
      c6:	8f e0       	ldi	r24, 0x0F	; 15
      c8:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
	LED_OFF(LEFT_LIGHT_PIN);
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
	Timer1_Count_1ms(seconds);
      d2:	89 e4       	ldi	r24, 0x49	; 73
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 0c 09 	call	0x1218	; 0x1218 <Timer1_Count_1ms>
      da:	08 95       	ret

000000dc <measure_time>:

//BACK_LIGHT_PIN
//PRESSED
void measure_time(void)
{
	time_in_seconds=0;
      dc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_in_seconds>
      e0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_in_seconds+0x1>
      e4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_in_seconds+0x2>
      e8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_in_seconds+0x3>
	Timer1_reset();
      ec:	0e 94 1f 09 	call	0x123e	; 0x123e <Timer1_reset>
      f0:	08 95       	ret

000000f2 <Back_Light_Check>:
}
void Back_Light_Check(void)
{
	if(DIO_ReadPin(BACKLIGHT_BUTTON)==PRESSED)
      f2:	8b e0       	ldi	r24, 0x0B	; 11
      f4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
      f8:	81 11       	cpse	r24, r1
      fa:	49 c0       	rjmp	.+146    	; 0x18e <Back_Light_Check+0x9c>
	{
		Back_buttons_state==PRESSED;
		measure_time();
      fc:	0e 94 6e 00 	call	0xdc	; 0xdc <measure_time>
		//DIO_TogglePin(BACK_LIGHT_PIN);
		
		while(DIO_ReadPin(BACKLIGHT_BUTTON)==PRESSED);
     100:	8b e0       	ldi	r24, 0x0B	; 11
     102:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     106:	88 23       	and	r24, r24
     108:	d9 f3       	breq	.-10     	; 0x100 <Back_Light_Check+0xe>

		if(time_in_seconds<1000)
     10a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_in_seconds>
     10e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_in_seconds+0x1>
     112:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_in_seconds+0x2>
     116:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_in_seconds+0x3>
     11a:	88 3e       	cpi	r24, 0xE8	; 232
     11c:	23 e0       	ldi	r18, 0x03	; 3
     11e:	92 07       	cpc	r25, r18
     120:	a1 05       	cpc	r26, r1
     122:	b1 05       	cpc	r27, r1
     124:	d0 f4       	brcc	.+52     	; 0x15a <Back_Light_Check+0x68>
		{
			//back_light_state=BACK_LIGHT_OFF;
			//DIO_TogglePin(BACK_LIGHT_PIN);
			
			switch(back_light_state)
     126:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <back_light_state>
     12a:	88 23       	and	r24, r24
     12c:	19 f0       	breq	.+6      	; 0x134 <Back_Light_Check+0x42>
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	41 f0       	breq	.+16     	; 0x142 <Back_Light_Check+0x50>
     132:	0d c0       	rjmp	.+26     	; 0x14e <Back_Light_Check+0x5c>
			{
				case BACK_LIGHT_OFF:
				back_light_state=BACK_LIGHT_ON;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <back_light_state>
				LED_ON(BACK_LIGHT_PIN);
     13a:	8f e0       	ldi	r24, 0x0F	; 15
     13c:	0e 94 32 04 	call	0x864	; 0x864 <LED_ON>
				break;
     140:	23 c0       	rjmp	.+70     	; 0x188 <Back_Light_Check+0x96>
				case BACK_LIGHT_ON:
				LED_OFF(BACK_LIGHT_PIN);
     142:	8f e0       	ldi	r24, 0x0F	; 15
     144:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				back_light_state=BACK_LIGHT_OFF;
     148:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <back_light_state>
				break;
     14c:	1d c0       	rjmp	.+58     	; 0x188 <Back_Light_Check+0x96>
				default:
				LED_OFF(BACK_LIGHT_PIN);
     14e:	8f e0       	ldi	r24, 0x0F	; 15
     150:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				back_light_state=BACK_LIGHT_OFF;
     154:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <back_light_state>
				break;
     158:	17 c0       	rjmp	.+46     	; 0x188 <Back_Light_Check+0x96>
			}
		}
		else if(time_in_seconds>=1000&&time_in_seconds<2500)
     15a:	ac 01       	movw	r20, r24
     15c:	bd 01       	movw	r22, r26
     15e:	48 5e       	subi	r20, 0xE8	; 232
     160:	53 40       	sbci	r21, 0x03	; 3
     162:	61 09       	sbc	r22, r1
     164:	71 09       	sbc	r23, r1
     166:	4c 3d       	cpi	r20, 0xDC	; 220
     168:	55 40       	sbci	r21, 0x05	; 5
     16a:	61 05       	cpc	r22, r1
     16c:	71 05       	cpc	r23, r1
     16e:	20 f4       	brcc	.+8      	; 0x178 <Back_Light_Check+0x86>
		{
			back_light_state=BACK_LIGHT_SLOW_BLINK;
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <back_light_state>
     176:	08 c0       	rjmp	.+16     	; 0x188 <Back_Light_Check+0x96>
		}
		else if(time_in_seconds>=2500)
     178:	84 3c       	cpi	r24, 0xC4	; 196
     17a:	99 40       	sbci	r25, 0x09	; 9
     17c:	a1 05       	cpc	r26, r1
     17e:	b1 05       	cpc	r27, r1
     180:	18 f0       	brcs	.+6      	; 0x188 <Back_Light_Check+0x96>
		{
			back_light_state=BACK_LIGHT_FAST_BLINK;
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <back_light_state>
		}
		Back_buttons_state=NOT_PRESSED;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     18e:	08 95       	ret

00000190 <FRONT_Light_Check>:
}


void FRONT_Light_Check(void)
{
	if(DIO_ReadPin(FRONTLIGHT_BUTTON)==PRESSED)
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     196:	81 11       	cpse	r24, r1
     198:	45 c0       	rjmp	.+138    	; 0x224 <FRONT_Light_Check+0x94>
	{
		measure_time();
     19a:	0e 94 6e 00 	call	0xdc	; 0xdc <measure_time>
		//DIO_TogglePin(BACK_LIGHT_PIN);
		
		while(DIO_ReadPin(FRONTLIGHT_BUTTON)==PRESSED);
     19e:	89 e0       	ldi	r24, 0x09	; 9
     1a0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     1a4:	88 23       	and	r24, r24
     1a6:	d9 f3       	breq	.-10     	; 0x19e <FRONT_Light_Check+0xe>

		if(time_in_seconds<1000)
     1a8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_in_seconds>
     1ac:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_in_seconds+0x1>
     1b0:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_in_seconds+0x2>
     1b4:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_in_seconds+0x3>
     1b8:	88 3e       	cpi	r24, 0xE8	; 232
     1ba:	23 e0       	ldi	r18, 0x03	; 3
     1bc:	92 07       	cpc	r25, r18
     1be:	a1 05       	cpc	r26, r1
     1c0:	b1 05       	cpc	r27, r1
     1c2:	c8 f4       	brcc	.+50     	; 0x1f6 <FRONT_Light_Check+0x66>
		{
			//back_light_state=BACK_LIGHT_OFF;
			//DIO_TogglePin(BACK_LIGHT_PIN);
			
			switch(front_light_state)
     1c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <front_light_state>
     1c8:	88 23       	and	r24, r24
     1ca:	19 f0       	breq	.+6      	; 0x1d2 <FRONT_Light_Check+0x42>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	39 f0       	breq	.+14     	; 0x1de <FRONT_Light_Check+0x4e>
     1d0:	0c c0       	rjmp	.+24     	; 0x1ea <FRONT_Light_Check+0x5a>
			{
				case FRONT_LIGHT_OFF:
				front_light_state=FRONT_LIGHT_ON;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <front_light_state>
				LED_ON(FRONT_LIGHT_PIN);
     1d8:	0e 94 32 04 	call	0x864	; 0x864 <LED_ON>
				break;
     1dc:	08 95       	ret
				case FRONT_LIGHT_ON:
				LED_OFF(FRONT_LIGHT_PIN);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				front_light_state=FRONT_LIGHT_OFF;
     1e4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <front_light_state>
				break;
     1e8:	08 95       	ret
				default:
				LED_OFF(FRONT_LIGHT_PIN);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				front_light_state=FRONT_LIGHT_OFF;
     1f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <front_light_state>
				break;
     1f4:	08 95       	ret
			}
		}
		else if(time_in_seconds>=1000&&time_in_seconds<2500)
     1f6:	ac 01       	movw	r20, r24
     1f8:	bd 01       	movw	r22, r26
     1fa:	48 5e       	subi	r20, 0xE8	; 232
     1fc:	53 40       	sbci	r21, 0x03	; 3
     1fe:	61 09       	sbc	r22, r1
     200:	71 09       	sbc	r23, r1
     202:	4c 3d       	cpi	r20, 0xDC	; 220
     204:	55 40       	sbci	r21, 0x05	; 5
     206:	61 05       	cpc	r22, r1
     208:	71 05       	cpc	r23, r1
     20a:	20 f4       	brcc	.+8      	; 0x214 <FRONT_Light_Check+0x84>
		{
			front_light_state=FRONT_LIGHT_SLOW_BLINK;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <front_light_state>
     212:	08 95       	ret
		}
		else if(time_in_seconds>=2500)
     214:	84 3c       	cpi	r24, 0xC4	; 196
     216:	99 40       	sbci	r25, 0x09	; 9
     218:	a1 05       	cpc	r26, r1
     21a:	b1 05       	cpc	r27, r1
     21c:	18 f0       	brcs	.+6      	; 0x224 <FRONT_Light_Check+0x94>
		{
			front_light_state=FRONT_LIGHT_FAST_BLINK;
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <front_light_state>
     224:	08 95       	ret

00000226 <LEFT_Light_Check>:
	}
}

void LEFT_Light_Check(void)
{
	if(DIO_ReadPin(LEFTLIGHT_BUTTON)==PRESSED)
     226:	8b e1       	ldi	r24, 0x1B	; 27
     228:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     22c:	81 11       	cpse	r24, r1
     22e:	46 c0       	rjmp	.+140    	; 0x2bc <LEFT_Light_Check+0x96>
	{
		measure_time();
     230:	0e 94 6e 00 	call	0xdc	; 0xdc <measure_time>
		//DIO_TogglePin(BACK_LIGHT_PIN);
		
		while(DIO_ReadPin(LEFTLIGHT_BUTTON)==PRESSED);
     234:	8b e1       	ldi	r24, 0x1B	; 27
     236:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     23a:	88 23       	and	r24, r24
     23c:	d9 f3       	breq	.-10     	; 0x234 <LEFT_Light_Check+0xe>

		if(time_in_seconds<1000)
     23e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_in_seconds>
     242:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_in_seconds+0x1>
     246:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_in_seconds+0x2>
     24a:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_in_seconds+0x3>
     24e:	88 3e       	cpi	r24, 0xE8	; 232
     250:	23 e0       	ldi	r18, 0x03	; 3
     252:	92 07       	cpc	r25, r18
     254:	a1 05       	cpc	r26, r1
     256:	b1 05       	cpc	r27, r1
     258:	d0 f4       	brcc	.+52     	; 0x28e <LEFT_Light_Check+0x68>
		{
			//back_light_state=BACK_LIGHT_OFF;
			//DIO_TogglePin(BACK_LIGHT_PIN);
			
			switch(left_light_state)
     25a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <left_light_state>
     25e:	88 23       	and	r24, r24
     260:	19 f0       	breq	.+6      	; 0x268 <LEFT_Light_Check+0x42>
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	41 f0       	breq	.+16     	; 0x276 <LEFT_Light_Check+0x50>
     266:	0d c0       	rjmp	.+26     	; 0x282 <LEFT_Light_Check+0x5c>
			{
				case LEFT_LIGHT_OFF:
				left_light_state=LEFT_LIGHT_ON;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <left_light_state>
				LED_ON(LEFT_LIGHT_PIN);
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 32 04 	call	0x864	; 0x864 <LED_ON>
				break;
     274:	08 95       	ret
				case LEFT_LIGHT_ON:
				LED_OFF(LEFT_LIGHT_PIN);
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				left_light_state=LEFT_LIGHT_OFF;
     27c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <left_light_state>
				break;
     280:	08 95       	ret
				default:
				LED_OFF(LEFT_LIGHT_PIN);
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				left_light_state=LEFT_LIGHT_OFF;
     288:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <left_light_state>
				break;
     28c:	08 95       	ret
			}
		}
		else if(time_in_seconds>=1000&&time_in_seconds<2500)
     28e:	ac 01       	movw	r20, r24
     290:	bd 01       	movw	r22, r26
     292:	48 5e       	subi	r20, 0xE8	; 232
     294:	53 40       	sbci	r21, 0x03	; 3
     296:	61 09       	sbc	r22, r1
     298:	71 09       	sbc	r23, r1
     29a:	4c 3d       	cpi	r20, 0xDC	; 220
     29c:	55 40       	sbci	r21, 0x05	; 5
     29e:	61 05       	cpc	r22, r1
     2a0:	71 05       	cpc	r23, r1
     2a2:	20 f4       	brcc	.+8      	; 0x2ac <LEFT_Light_Check+0x86>
		{
			left_light_state=LEFT_LIGHT_SLOW_BLINK;
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <left_light_state>
     2aa:	08 95       	ret
		}
		else if(time_in_seconds>=2500)
     2ac:	84 3c       	cpi	r24, 0xC4	; 196
     2ae:	99 40       	sbci	r25, 0x09	; 9
     2b0:	a1 05       	cpc	r26, r1
     2b2:	b1 05       	cpc	r27, r1
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <LEFT_Light_Check+0x96>
		{
			left_light_state=LEFT_LIGHT_FAST_BLINK;
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <left_light_state>
     2bc:	08 95       	ret

000002be <RIGHT_Light_Check>:
}


void RIGHT_Light_Check(void)
{
	if(DIO_ReadPin(RIGHTLIGHT_BUTTON)==PRESSED)
     2be:	8a e1       	ldi	r24, 0x1A	; 26
     2c0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     2c4:	81 11       	cpse	r24, r1
     2c6:	46 c0       	rjmp	.+140    	; 0x354 <RIGHT_Light_Check+0x96>
	{
		measure_time();
     2c8:	0e 94 6e 00 	call	0xdc	; 0xdc <measure_time>
		//DIO_TogglePin(BACK_LIGHT_PIN);
		
		while(DIO_ReadPin(RIGHTLIGHT_BUTTON)==PRESSED);
     2cc:	8a e1       	ldi	r24, 0x1A	; 26
     2ce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     2d2:	88 23       	and	r24, r24
     2d4:	d9 f3       	breq	.-10     	; 0x2cc <RIGHT_Light_Check+0xe>

		if(time_in_seconds<1000)
     2d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_in_seconds>
     2da:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_in_seconds+0x1>
     2de:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_in_seconds+0x2>
     2e2:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_in_seconds+0x3>
     2e6:	88 3e       	cpi	r24, 0xE8	; 232
     2e8:	23 e0       	ldi	r18, 0x03	; 3
     2ea:	92 07       	cpc	r25, r18
     2ec:	a1 05       	cpc	r26, r1
     2ee:	b1 05       	cpc	r27, r1
     2f0:	d0 f4       	brcc	.+52     	; 0x326 <RIGHT_Light_Check+0x68>
		{
			//back_light_state=BACK_LIGHT_OFF;
			//DIO_TogglePin(BACK_LIGHT_PIN);
			
			switch(right_light_state)
     2f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     2f6:	88 23       	and	r24, r24
     2f8:	19 f0       	breq	.+6      	; 0x300 <RIGHT_Light_Check+0x42>
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	41 f0       	breq	.+16     	; 0x30e <RIGHT_Light_Check+0x50>
     2fe:	0d c0       	rjmp	.+26     	; 0x31a <RIGHT_Light_Check+0x5c>
			{
				case RIGHT_LIGHT_OFF:
				right_light_state=RIGHT_LIGHT_ON;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				LED_ON(RIGHT_LIGHT_PIN);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	0e 94 32 04 	call	0x864	; 0x864 <LED_ON>
				break;
     30c:	08 95       	ret
				case RIGHT_LIGHT_ON:
				LED_OFF(RIGHT_LIGHT_PIN);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				right_light_state=RIGHT_LIGHT_OFF;
     314:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
				break;
     318:	08 95       	ret
				default:
				LED_OFF(RIGHT_LIGHT_PIN);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 36 04 	call	0x86c	; 0x86c <LED_OFF>
				right_light_state=RIGHT_LIGHT_OFF;
     320:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
				break;
     324:	08 95       	ret
			}
		}
		else if(time_in_seconds>=1000&&time_in_seconds<2500)
     326:	ac 01       	movw	r20, r24
     328:	bd 01       	movw	r22, r26
     32a:	48 5e       	subi	r20, 0xE8	; 232
     32c:	53 40       	sbci	r21, 0x03	; 3
     32e:	61 09       	sbc	r22, r1
     330:	71 09       	sbc	r23, r1
     332:	4c 3d       	cpi	r20, 0xDC	; 220
     334:	55 40       	sbci	r21, 0x05	; 5
     336:	61 05       	cpc	r22, r1
     338:	71 05       	cpc	r23, r1
     33a:	20 f4       	brcc	.+8      	; 0x344 <RIGHT_Light_Check+0x86>
		{
			right_light_state=RIGHT_LIGHT_SLOW_BLINK;
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     342:	08 95       	ret
		}
		else if(time_in_seconds>=2500)
     344:	84 3c       	cpi	r24, 0xC4	; 196
     346:	99 40       	sbci	r25, 0x09	; 9
     348:	a1 05       	cpc	r26, r1
     34a:	b1 05       	cpc	r27, r1
     34c:	18 f0       	brcs	.+6      	; 0x354 <RIGHT_Light_Check+0x96>
		{
			right_light_state=RIGHT_LIGHT_FAST_BLINK;
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     354:	08 95       	ret

00000356 <Main_Menu>:
}

APP_state Main_Menu(void)
{
	int choice=NO_KEY;
	LCD_Clear();
     356:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
	LCD_WriteString("1) Edit Password");
     35a:	85 e6       	ldi	r24, 0x65	; 101
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
	LCD_SetCursor(1,0);
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_SetCursor>
	LCD_WriteString("2) Control mode");
     36a:	86 e7       	ldi	r24, 0x76	; 118
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
	}
}

APP_state Main_Menu(void)
{
	int choice=NO_KEY;
     372:	84 e5       	ldi	r24, 0x54	; 84
     374:	90 e0       	ldi	r25, 0x00	; 0
	LCD_Clear();
	LCD_WriteString("1) Edit Password");
	LCD_SetCursor(1,0);
	LCD_WriteString("2) Control mode");
	while(choice==NO_KEY)
     376:	03 c0       	rjmp	.+6      	; 0x37e <Main_Menu+0x28>
	{
		choice=KEYPAD_GetKey();
     378:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <KEYPAD_GetKey>
     37c:	90 e0       	ldi	r25, 0x00	; 0
	int choice=NO_KEY;
	LCD_Clear();
	LCD_WriteString("1) Edit Password");
	LCD_SetCursor(1,0);
	LCD_WriteString("2) Control mode");
	while(choice==NO_KEY)
     37e:	84 35       	cpi	r24, 0x54	; 84
     380:	91 05       	cpc	r25, r1
     382:	d1 f3       	breq	.-12     	; 0x378 <Main_Menu+0x22>
	{
		choice=KEYPAD_GetKey();
	}
	switch (choice)
     384:	81 33       	cpi	r24, 0x31	; 49
     386:	91 05       	cpc	r25, r1
     388:	19 f0       	breq	.+6      	; 0x390 <Main_Menu+0x3a>
     38a:	c2 97       	sbiw	r24, 0x32	; 50
     38c:	29 f0       	breq	.+10     	; 0x398 <Main_Menu+0x42>
     38e:	02 c0       	rjmp	.+4      	; 0x394 <Main_Menu+0x3e>
	{
		case '1':
			return CHANGE_PASSWORD;
     390:	87 e0       	ldi	r24, 0x07	; 7
     392:	08 95       	ret
			break;
		case '2':
			return DRIVING_AND_CONTROL;
			break;
		default:
			return MAIN_MENU;
     394:	85 e0       	ldi	r24, 0x05	; 5
     396:	08 95       	ret
	{
		case '1':
			return CHANGE_PASSWORD;
			break;
		case '2':
			return DRIVING_AND_CONTROL;
     398:	86 e0       	ldi	r24, 0x06	; 6
			break;
		default:
			return MAIN_MENU;
	}
}
     39a:	08 95       	ret

0000039c <Start_Lighting>:

void Start_Lighting(void)
{
	if(time_in_seconds%1000==0)
     39c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <time_in_seconds>
     3a0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <time_in_seconds+0x1>
     3a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_in_seconds+0x2>
     3a8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_in_seconds+0x3>
     3ac:	28 ee       	ldi	r18, 0xE8	; 232
     3ae:	33 e0       	ldi	r19, 0x03	; 3
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
     3b8:	67 2b       	or	r22, r23
     3ba:	68 2b       	or	r22, r24
     3bc:	69 2b       	or	r22, r25
     3be:	d9 f4       	brne	.+54     	; 0x3f6 <Start_Lighting+0x5a>
	{
		if(back_light_state==BACK_LIGHT_SLOW_BLINK)
     3c0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <back_light_state>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	19 f4       	brne	.+6      	; 0x3ce <Start_Lighting+0x32>
		DIO_TogglePin(PINB7);
     3c8:	8f e0       	ldi	r24, 0x0F	; 15
     3ca:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
		if(front_light_state==FRONT_LIGHT_SLOW_BLINK)
     3ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <front_light_state>
     3d2:	82 30       	cpi	r24, 0x02	; 2
     3d4:	19 f4       	brne	.+6      	; 0x3dc <Start_Lighting+0x40>
		DIO_TogglePin(PINA1);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
		if(left_light_state==LEFT_LIGHT_SLOW_BLINK)
     3dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <left_light_state>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <Start_Lighting+0x4c>
		{
			DIO_TogglePin(PINA2);
     3e4:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
		}
		if(right_light_state==RIGHT_LIGHT_SLOW_BLINK)
     3e8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <Start_Lighting+0x5a>
		DIO_TogglePin(RIGHT_LIGHT_PIN);
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
	}
	if(time_in_seconds%100==0)
     3f6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <time_in_seconds>
     3fa:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <time_in_seconds+0x1>
     3fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_in_seconds+0x2>
     402:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_in_seconds+0x3>
     406:	24 e6       	ldi	r18, 0x64	; 100
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
     412:	67 2b       	or	r22, r23
     414:	68 2b       	or	r22, r24
     416:	69 2b       	or	r22, r25
     418:	e1 f4       	brne	.+56     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	{
		if(back_light_state==BACK_LIGHT_FAST_BLINK)
     41a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <back_light_state>
     41e:	83 30       	cpi	r24, 0x03	; 3
     420:	19 f4       	brne	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		DIO_TogglePin(PINB7);
     422:	8f e0       	ldi	r24, 0x0F	; 15
     424:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
		if(front_light_state==FRONT_LIGHT_FAST_BLINK)
     428:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <front_light_state>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	19 f4       	brne	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		DIO_TogglePin(PINA1);
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
		if(left_light_state==LEFT_LIGHT_FAST_BLINK)
     436:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <left_light_state>
     43a:	83 30       	cpi	r24, 0x03	; 3
     43c:	19 f4       	brne	.+6      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
			DIO_TogglePin(PINA2);
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
		}
		if(right_light_state==RIGHT_LIGHT_FAST_BLINK)
     444:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	19 f4       	brne	.+6      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		DIO_TogglePin(RIGHT_LIGHT_PIN);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_TogglePin>
     452:	08 95       	ret

00000454 <Welcome_message>:
			_delay_ms(100);
			return MAIN_MENU;
		}
	}
	return PASSWORD_CORRECT;
}
     454:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
     458:	86 e8       	ldi	r24, 0x86	; 134
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_SetCursor>
     468:	08 95       	ret

0000046a <Take_Password>:
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	0e 94 2a 02 	call	0x454	; 0x454 <Welcome_message>
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	10 c0       	rjmp	.+32     	; 0x49a <Take_Password+0x30>
     47a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <KEYPAD_GetKey>
     47e:	c8 2f       	mov	r28, r24
     480:	01 c0       	rjmp	.+2      	; 0x484 <Take_Password+0x1a>
     482:	c4 e5       	ldi	r28, 0x54	; 84
     484:	c4 35       	cpi	r28, 0x54	; 84
     486:	c9 f3       	breq	.-14     	; 0x47a <Take_Password+0x10>
     488:	8c 2f       	mov	r24, r28
     48a:	0e 94 04 04 	call	0x808	; 0x808 <LCD_WriteChar>
     48e:	f8 01       	movw	r30, r16
     490:	ef 59       	subi	r30, 0x9F	; 159
     492:	ff 4f       	sbci	r31, 0xFF	; 255
     494:	c0 83       	st	Z, r28
     496:	0f 5f       	subi	r16, 0xFF	; 255
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	03 30       	cpi	r16, 0x03	; 3
     49c:	11 05       	cpc	r17, r1
     49e:	8c f3       	brlt	.-30     	; 0x482 <Take_Password+0x18>
     4a0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <password+0x2>
     4a4:	84 35       	cpi	r24, 0x54	; 84
     4a6:	89 f0       	breq	.+34     	; 0x4ca <Take_Password+0x60>
     4a8:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
     4ac:	83 e9       	ldi	r24, 0x93	; 147
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	80 e7       	ldi	r24, 0x70	; 112
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <Take_Password+0x50>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <Take_Password+0x5a>
     4c4:	00 00       	nop
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <Take_Password+0x62>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <Check_Password>:
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <Check_Password+0xc>
     4e0:	1f 92       	push	r1
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	84 e5       	ldi	r24, 0x54	; 84
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	8a 83       	std	Y+2, r24	; 0x02
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	e1 2c       	mov	r14, r1
     4f0:	f1 2c       	mov	r15, r1
     4f2:	14 c0       	rjmp	.+40     	; 0x51c <Check_Password+0x48>
     4f4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <KEYPAD_GetKey>
     4f8:	18 2f       	mov	r17, r24
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <Check_Password+0x2a>
     4fc:	14 e5       	ldi	r17, 0x54	; 84
     4fe:	14 35       	cpi	r17, 0x54	; 84
     500:	c9 f3       	breq	.-14     	; 0x4f4 <Check_Password+0x20>
     502:	81 2f       	mov	r24, r17
     504:	0e 94 04 04 	call	0x808	; 0x808 <LCD_WriteChar>
     508:	e1 e0       	ldi	r30, 0x01	; 1
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	ec 0f       	add	r30, r28
     50e:	fd 1f       	adc	r31, r29
     510:	ee 0d       	add	r30, r14
     512:	ff 1d       	adc	r31, r15
     514:	10 83       	st	Z, r17
     516:	2f ef       	ldi	r18, 0xFF	; 255
     518:	e2 1a       	sub	r14, r18
     51a:	f2 0a       	sbc	r15, r18
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	e8 16       	cp	r14, r24
     520:	f1 04       	cpc	r15, r1
     522:	64 f3       	brlt	.-40     	; 0x4fc <Check_Password+0x28>
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	84 35       	cpi	r24, 0x54	; 84
     528:	39 f1       	breq	.+78     	; 0x578 <Check_Password+0xa4>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	1f c0       	rjmp	.+62     	; 0x56e <Check_Password+0x9a>
     530:	e1 e0       	ldi	r30, 0x01	; 1
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	ec 0f       	add	r30, r28
     536:	fd 1f       	adc	r31, r29
     538:	e8 0f       	add	r30, r24
     53a:	f9 1f       	adc	r31, r25
     53c:	30 81       	ld	r19, Z
     53e:	fc 01       	movw	r30, r24
     540:	ef 59       	subi	r30, 0x9F	; 159
     542:	ff 4f       	sbci	r31, 0xFF	; 255
     544:	20 81       	ld	r18, Z
     546:	32 17       	cp	r19, r18
     548:	89 f0       	breq	.+34     	; 0x56c <Check_Password+0x98>
     54a:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
     54e:	84 ea       	ldi	r24, 0xA4	; 164
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
     556:	9f ef       	ldi	r25, 0xFF	; 255
     558:	20 e7       	ldi	r18, 0x70	; 112
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	91 50       	subi	r25, 0x01	; 1
     55e:	20 40       	sbci	r18, 0x00	; 0
     560:	80 40       	sbci	r24, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <Check_Password+0x88>
     564:	00 c0       	rjmp	.+0      	; 0x566 <Check_Password+0x92>
     566:	00 00       	nop
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	07 c0       	rjmp	.+14     	; 0x57a <Check_Password+0xa6>
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	83 30       	cpi	r24, 0x03	; 3
     570:	91 05       	cpc	r25, r1
     572:	f4 f2       	brlt	.-68     	; 0x530 <Check_Password+0x5c>
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	01 c0       	rjmp	.+2      	; 0x57a <Check_Password+0xa6>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	08 95       	ret

0000058c <Ignite_Motor>:
void Ignite_Motor(void)
{
	LCD_Clear();
     58c:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
	LCD_WriteString("CORRECT!");
     590:	8c ea       	ldi	r24, 0xAC	; 172
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
	
	Motor_Clock();
     598:	0e 94 3a 04 	call	0x874	; 0x874 <Motor_Clock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	80 e7       	ldi	r24, 0x70	; 112
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	90 40       	sbci	r25, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <Ignite_Motor+0x16>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <Ignite_Motor+0x20>
     5ac:	00 00       	nop
     5ae:	08 95       	ret

000005b0 <KEYPAD_Init>:
 */ 
#include "KEYPAD.h"
#include "KEYPAD_Cfg.h"
void KEYPAD_Init(void)
{
	DIO_WritePin(FIRST_OUTPUT,HIGH);
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(FIRST_OUTPUT+1,HIGH);
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	81 e1       	ldi	r24, 0x11	; 17
     5bc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(FIRST_OUTPUT+2,HIGH);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	82 e1       	ldi	r24, 0x12	; 18
     5c4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(FIRST_OUTPUT+3,HIGH);
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	83 e1       	ldi	r24, 0x13	; 19
     5cc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     5d0:	08 95       	ret

000005d2 <KEYPAD_GetKey>:
}

u8 KEYPAD_GetKey(void)
{
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
	u8 r,c,key=NO_KEY;
     5dc:	0f 2e       	mov	r0, r31
     5de:	f4 e5       	ldi	r31, 0x54	; 84
     5e0:	ff 2e       	mov	r15, r31
     5e2:	f0 2d       	mov	r31, r0
	for (r=0;r<ROWS;r++)
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	28 c0       	rjmp	.+80     	; 0x638 <KEYPAD_GetKey+0x66>
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
     5e8:	00 e1       	ldi	r16, 0x10	; 16
     5ea:	01 0f       	add	r16, r17
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	80 2f       	mov	r24, r16
     5f0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
		for (c=0;c<COLS;c++)
     5f4:	d0 e0       	ldi	r29, 0x00	; 0
     5f6:	19 c0       	rjmp	.+50     	; 0x62a <KEYPAD_GetKey+0x58>
		{
			if (DIO_ReadPin(FIRST_INPUT+c)==LOW)
     5f8:	c4 e1       	ldi	r28, 0x14	; 20
     5fa:	cd 0f       	add	r28, r29
     5fc:	8c 2f       	mov	r24, r28
     5fe:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     602:	81 11       	cpse	r24, r1
     604:	11 c0       	rjmp	.+34     	; 0x628 <KEYPAD_GetKey+0x56>
			{
				key=KeysArray[r][c];
     606:	81 2f       	mov	r24, r17
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	e8 0f       	add	r30, r24
     612:	f9 1f       	adc	r31, r25
     614:	eb 52       	subi	r30, 0x2B	; 43
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	ed 0f       	add	r30, r29
     61a:	f1 1d       	adc	r31, r1
     61c:	f0 80       	ld	r15, Z
				while(DIO_ReadPin(FIRST_INPUT+c)==LOW);
     61e:	8c 2f       	mov	r24, r28
     620:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DIO_ReadPin>
     624:	88 23       	and	r24, r24
     626:	d9 f3       	breq	.-10     	; 0x61e <KEYPAD_GetKey+0x4c>
{
	u8 r,c,key=NO_KEY;
	for (r=0;r<ROWS;r++)
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
		for (c=0;c<COLS;c++)
     628:	df 5f       	subi	r29, 0xFF	; 255
     62a:	d3 30       	cpi	r29, 0x03	; 3
     62c:	28 f3       	brcs	.-54     	; 0x5f8 <KEYPAD_GetKey+0x26>
			{
				key=KeysArray[r][c];
				while(DIO_ReadPin(FIRST_INPUT+c)==LOW);
			}
		}
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	80 2f       	mov	r24, r16
     632:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
}

u8 KEYPAD_GetKey(void)
{
	u8 r,c,key=NO_KEY;
	for (r=0;r<ROWS;r++)
     636:	1f 5f       	subi	r17, 0xFF	; 255
     638:	14 30       	cpi	r17, 0x04	; 4
     63a:	b0 f2       	brcs	.-84     	; 0x5e8 <KEYPAD_GetKey+0x16>
			}
		}
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
	}
	return key;
     63c:	8f 2d       	mov	r24, r15
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	08 95       	ret

0000064a <WriteIns>:
	
}

#elif LCD_MODE ==_4_BIT
static void WriteIns(u8 ins)
{
     64a:	cf 93       	push	r28
     64c:	c8 2f       	mov	r28, r24
	
	
	DIO_WritePin(RS,LOW);
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
     656:	6c 2f       	mov	r22, r28
     658:	66 1f       	adc	r22, r22
     65a:	66 27       	eor	r22, r22
     65c:	66 1f       	adc	r22, r22
     65e:	85 e0       	ldi	r24, 0x05	; 5
     660:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
     664:	c6 fb       	bst	r28, 6
     666:	66 27       	eor	r22, r22
     668:	60 f9       	bld	r22, 0
     66a:	86 e0       	ldi	r24, 0x06	; 6
     66c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
     670:	c5 fb       	bst	r28, 5
     672:	66 27       	eor	r22, r22
     674:	60 f9       	bld	r22, 0
     676:	87 e0       	ldi	r24, 0x07	; 7
     678:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
     67c:	c4 fb       	bst	r28, 4
     67e:	66 27       	eor	r22, r22
     680:	60 f9       	bld	r22, 0
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	
	DIO_WritePin(EN,HIGH);
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     690:	8f e9       	ldi	r24, 0x9F	; 159
     692:	9f e0       	ldi	r25, 0x0F	; 15
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <WriteIns+0x4a>
     698:	00 c0       	rjmp	.+0      	; 0x69a <WriteIns+0x50>
     69a:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     6a4:	8f e9       	ldi	r24, 0x9F	; 159
     6a6:	9f e0       	ldi	r25, 0x0F	; 15
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <WriteIns+0x5e>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <WriteIns+0x64>
     6ae:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(ins,3));
     6b0:	c3 fb       	bst	r28, 3
     6b2:	66 27       	eor	r22, r22
     6b4:	60 f9       	bld	r22, 0
     6b6:	85 e0       	ldi	r24, 0x05	; 5
     6b8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
     6bc:	c2 fb       	bst	r28, 2
     6be:	66 27       	eor	r22, r22
     6c0:	60 f9       	bld	r22, 0
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
     6c8:	c1 fb       	bst	r28, 1
     6ca:	66 27       	eor	r22, r22
     6cc:	60 f9       	bld	r22, 0
     6ce:	87 e0       	ldi	r24, 0x07	; 7
     6d0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
     6d4:	6c 2f       	mov	r22, r28
     6d6:	61 70       	andi	r22, 0x01	; 1
     6d8:	88 e0       	ldi	r24, 0x08	; 8
     6da:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     6e6:	8f e9       	ldi	r24, 0x9F	; 159
     6e8:	9f e0       	ldi	r25, 0x0F	; 15
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <WriteIns+0xa0>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <WriteIns+0xa6>
     6f0:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	84 e0       	ldi	r24, 0x04	; 4
     6f6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     6fa:	8f e9       	ldi	r24, 0x9F	; 159
     6fc:	9f e0       	ldi	r25, 0x0F	; 15
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <WriteIns+0xb4>
     702:	00 c0       	rjmp	.+0      	; 0x704 <WriteIns+0xba>
     704:	00 00       	nop
	_delay_ms(1);
}
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <WriteData>:

static void WriteData(u8 data)
{
     70a:	cf 93       	push	r28
     70c:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,HIGH);
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
     716:	6c 2f       	mov	r22, r28
     718:	66 1f       	adc	r22, r22
     71a:	66 27       	eor	r22, r22
     71c:	66 1f       	adc	r22, r22
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
     724:	c6 fb       	bst	r28, 6
     726:	66 27       	eor	r22, r22
     728:	60 f9       	bld	r22, 0
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
     730:	c5 fb       	bst	r28, 5
     732:	66 27       	eor	r22, r22
     734:	60 f9       	bld	r22, 0
     736:	87 e0       	ldi	r24, 0x07	; 7
     738:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
     73c:	c4 fb       	bst	r28, 4
     73e:	66 27       	eor	r22, r22
     740:	60 f9       	bld	r22, 0
     742:	88 e0       	ldi	r24, 0x08	; 8
     744:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>

	DIO_WritePin(EN,HIGH);
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     750:	8f e9       	ldi	r24, 0x9F	; 159
     752:	9f e0       	ldi	r25, 0x0F	; 15
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <WriteData+0x4a>
     758:	00 c0       	rjmp	.+0      	; 0x75a <WriteData+0x50>
     75a:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     764:	8f e9       	ldi	r24, 0x9F	; 159
     766:	9f e0       	ldi	r25, 0x0F	; 15
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <WriteData+0x5e>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <WriteData+0x64>
     76e:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(data,3));
     770:	c3 fb       	bst	r28, 3
     772:	66 27       	eor	r22, r22
     774:	60 f9       	bld	r22, 0
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
     77c:	c2 fb       	bst	r28, 2
     77e:	66 27       	eor	r22, r22
     780:	60 f9       	bld	r22, 0
     782:	86 e0       	ldi	r24, 0x06	; 6
     784:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
     788:	c1 fb       	bst	r28, 1
     78a:	66 27       	eor	r22, r22
     78c:	60 f9       	bld	r22, 0
     78e:	87 e0       	ldi	r24, 0x07	; 7
     790:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
     794:	6c 2f       	mov	r22, r28
     796:	61 70       	andi	r22, 0x01	; 1
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     7a6:	8f e9       	ldi	r24, 0x9F	; 159
     7a8:	9f e0       	ldi	r25, 0x0F	; 15
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <WriteData+0xa0>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <WriteData+0xa6>
     7b0:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     7ba:	8f e9       	ldi	r24, 0x9F	; 159
     7bc:	9f e0       	ldi	r25, 0x0F	; 15
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <WriteData+0xb4>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <WriteData+0xba>
     7c4:	00 00       	nop
	_delay_ms(1);
}
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <LCD_Init>:
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	80 e7       	ldi	r24, 0x70	; 112
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	90 40       	sbci	r25, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <LCD_Init+0x6>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <LCD_Init+0x10>
     7da:	00 00       	nop


void LCD_Init(void)
{
	_delay_ms(50);
	WriteIns(0x02);
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
	WriteIns(0x28);//5*7 2 lines
     7e2:	88 e2       	ldi	r24, 0x28	; 40
     7e4:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
     7e8:	8c e0       	ldi	r24, 0x0C	; 12
     7ea:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
	WriteIns(0x01);//clear screen
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
     7f4:	8f e9       	ldi	r24, 0x9F	; 159
     7f6:	9f e0       	ldi	r25, 0x0F	; 15
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_Init+0x2e>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_Init+0x34>
     7fe:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
     806:	08 95       	ret

00000808 <LCD_WriteChar>:

#endif

void LCD_WriteChar(u8 ch)
{
	WriteData(ch);
     808:	0e 94 85 03 	call	0x70a	; 0x70a <WriteData>
     80c:	08 95       	ret

0000080e <LCD_WriteString>:
}


void LCD_WriteString(u8*str)
{
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	8c 01       	movw	r16, r24
	u8 i;
	for (i=0;str[i];i++)
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	03 c0       	rjmp	.+6      	; 0x820 <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
     81a:	0e 94 04 04 	call	0x808	; 0x808 <LCD_WriteChar>


void LCD_WriteString(u8*str)
{
	u8 i;
	for (i=0;str[i];i++)
     81e:	cf 5f       	subi	r28, 0xFF	; 255
     820:	f8 01       	movw	r30, r16
     822:	ec 0f       	add	r30, r28
     824:	f1 1d       	adc	r31, r1
     826:	80 81       	ld	r24, Z
     828:	81 11       	cpse	r24, r1
     82a:	f7 cf       	rjmp	.-18     	; 0x81a <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i]);
	}
	
}
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret

00000834 <LCD_SetCursor>:


void LCD_SetCursor(u8 line,u8 cell)
{
	if (line==0)
     834:	81 11       	cpse	r24, r1
     836:	05 c0       	rjmp	.+10     	; 0x842 <LCD_SetCursor+0xe>
	{
		WriteIns(0x80|cell);
     838:	86 2f       	mov	r24, r22
     83a:	80 68       	ori	r24, 0x80	; 128
     83c:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
     840:	08 95       	ret
	}
	else if (line ==1)
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	21 f4       	brne	.+8      	; 0x84e <LCD_SetCursor+0x1a>
	{
		WriteIns(0x80+0x40+cell);
     846:	80 ec       	ldi	r24, 0xC0	; 192
     848:	86 0f       	add	r24, r22
     84a:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
     84e:	08 95       	ret

00000850 <LCD_Clear>:
	
}

void LCD_Clear(void)
{
	WriteIns(0x01);
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 25 03 	call	0x64a	; 0x64a <WriteIns>
     856:	8f e9       	ldi	r24, 0x9F	; 159
     858:	9f e0       	ldi	r25, 0x0F	; 15
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_Clear+0xa>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
     862:	08 95       	ret

00000864 <LED_ON>:
	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
}
void LED_ON(DIO_Pin_type pin)
{
	DIO_WritePin(pin,HIGH);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     86a:	08 95       	ret

0000086c <LED_OFF>:
}

void LED_OFF(DIO_Pin_type pin)
{
	DIO_WritePin(pin,LOW);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
     872:	08 95       	ret

00000874 <Motor_Clock>:
	return STOPPED;
}

MOTOR_state_t Motor_Clock(void)
{
	DIO_WritePin(MOTOR_PIN1,HIGH);
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	8c e1       	ldi	r24, 0x1C	; 28
     878:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	DIO_WritePin(MOTOR_PIN2,LOW);
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	8f e1       	ldi	r24, 0x1F	; 31
     880:	0e 94 b7 05 	call	0xb6e	; 0xb6e <DIO_WritePin>
	return CLOCKWISE;
}
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	08 95       	ret

00000888 <Menu_Back>:
	//}
//}
APP_state state=PASSWORD_NOT_SET;
void Menu_Back(void)
{
	state=MAIN_MENU;
     888:	85 e0       	ldi	r24, 0x05	; 5
     88a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
     88e:	08 95       	ret

00000890 <main>:
}

int main(void)
{
	sei();
     890:	78 94       	sei
	DIO_Init();
     892:	0e 94 a7 05 	call	0xb4e	; 0xb4e <DIO_Init>
	EXI_Enable(EX_INT2);
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	0e 94 b7 06 	call	0xd6e	; 0xd6e <EXI_Enable>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     89c:	62 e0       	ldi	r22, 0x02	; 2
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	0e 94 c9 06 	call	0xd92	; 0xd92 <EXI_TriggerEdge>
	EXI_SetCallBack(EX_INT2,Menu_Back);
     8a4:	64 e4       	ldi	r22, 0x44	; 68
     8a6:	74 e0       	ldi	r23, 0x04	; 4
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	0e 94 29 07 	call	0xe52	; 0xe52 <EXI_SetCallBack>
	KEYPAD_Init();
     8ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <KEYPAD_Init>
	LCD_Init();
     8b2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Init>
	Lighting_Init();
     8b6:	0e 94 5d 00 	call	0xba	; 0xba <Lighting_Init>
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <main+0x34>
	while (1)
	{
		
		while(state==PASSWORD_NOT_SET)
		{
			state=Take_Password();
     8bc:	0e 94 35 02 	call	0x46a	; 0x46a <Take_Password>
     8c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
	u8 flag=0;
	//Timer1_Count_1ms(test);
	while (1)
	{
		
		while(state==PASSWORD_NOT_SET)
     8c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	79 f4       	brne	.+30     	; 0x8ea <main+0x5a>
     8cc:	f7 cf       	rjmp	.-18     	; 0x8bc <main+0x2c>
			state=Take_Password();
			
		}
		while(state==PASSWORD_SET)
		{
			LCD_Clear();
     8ce:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
			LCD_WriteString("Enter The Password");
     8d2:	81 ee       	ldi	r24, 0xE1	; 225
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
			LCD_SetCursor(1,0);
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_SetCursor>
			state=Check_Password();
     8e2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Check_Password>
     8e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
		while(state==PASSWORD_NOT_SET)
		{
			state=Take_Password();
			
		}
		while(state==PASSWORD_SET)
     8ea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
     8ee:	88 23       	and	r24, r24
     8f0:	71 f3       	breq	.-36     	; 0x8ce <main+0x3e>
			LCD_Clear();
			LCD_WriteString("Enter The Password");
			LCD_SetCursor(1,0);
			state=Check_Password();
		}
		if(state==PASSWORD_CORRECT)
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	51 f4       	brne	.+20     	; 0x90a <main+0x7a>
		{
			Ignite_Motor();
     8f6:	0e 94 c6 02 	call	0x58c	; 0x58c <Ignite_Motor>
			state=MAIN_MENU;
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
     900:	04 c0       	rjmp	.+8      	; 0x90a <main+0x7a>
		}
		while(state==MAIN_MENU)
		{
			state=Main_Menu();
     902:	0e 94 ab 01 	call	0x356	; 0x356 <Main_Menu>
     906:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
		if(state==PASSWORD_CORRECT)
		{
			Ignite_Motor();
			state=MAIN_MENU;
		}
		while(state==MAIN_MENU)
     90a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
     90e:	85 30       	cpi	r24, 0x05	; 5
     910:	c1 f3       	breq	.-16     	; 0x902 <main+0x72>
		{
			state=Main_Menu();
		}
		if(state==DRIVING_AND_CONTROL)
     912:	86 30       	cpi	r24, 0x06	; 6
     914:	89 f4       	brne	.+34     	; 0x938 <main+0xa8>
		{
			LCD_Clear();
     916:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Clear>
			LCD_WriteString("To exit press back");
     91a:	84 ef       	ldi	r24, 0xF4	; 244
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_WriteString>
     922:	0a c0       	rjmp	.+20     	; 0x938 <main+0xa8>
		}
		while(state==DRIVING_AND_CONTROL)
		{
			
			Back_Light_Check();
     924:	0e 94 79 00 	call	0xf2	; 0xf2 <Back_Light_Check>
			FRONT_Light_Check();
     928:	0e 94 c8 00 	call	0x190	; 0x190 <FRONT_Light_Check>
			LEFT_Light_Check();
     92c:	0e 94 13 01 	call	0x226	; 0x226 <LEFT_Light_Check>
			RIGHT_Light_Check();
     930:	0e 94 5f 01 	call	0x2be	; 0x2be <RIGHT_Light_Check>
			Start_Lighting();
     934:	0e 94 ce 01 	call	0x39c	; 0x39c <Start_Lighting>
		if(state==DRIVING_AND_CONTROL)
		{
			LCD_Clear();
			LCD_WriteString("To exit press back");
		}
		while(state==DRIVING_AND_CONTROL)
     938:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
     93c:	86 30       	cpi	r24, 0x06	; 6
     93e:	91 f3       	breq	.-28     	; 0x924 <main+0x94>
     940:	04 c0       	rjmp	.+8      	; 0x94a <main+0xba>
			RIGHT_Light_Check();
			Start_Lighting();
		}
		while(state==CHANGE_PASSWORD)
		{
			state=Take_Password();
     942:	0e 94 35 02 	call	0x46a	; 0x46a <Take_Password>
     946:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
			FRONT_Light_Check();
			LEFT_Light_Check();
			RIGHT_Light_Check();
			Start_Lighting();
		}
		while(state==CHANGE_PASSWORD)
     94a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
     94e:	87 30       	cpi	r24, 0x07	; 7
     950:	c1 f3       	breq	.-16     	; 0x942 <main+0xb2>
     952:	b8 cf       	rjmp	.-144    	; 0x8c4 <main+0x34>

00000954 <DIO_InitPin>:
			break;
			case PC:
			CLR_BIT(PORTC,pin_num);
			break;
			case PD:
			CLR_BIT(PORTD,pin_num);
     954:	98 2f       	mov	r25, r24
     956:	96 95       	lsr	r25
     958:	96 95       	lsr	r25
     95a:	96 95       	lsr	r25
     95c:	87 70       	andi	r24, 0x07	; 7
     95e:	61 30       	cpi	r22, 0x01	; 1
     960:	09 f4       	brne	.+2      	; 0x964 <DIO_InitPin+0x10>
     962:	55 c0       	rjmp	.+170    	; 0xa0e <DIO_InitPin+0xba>
     964:	20 f0       	brcs	.+8      	; 0x96e <DIO_InitPin+0x1a>
     966:	62 30       	cpi	r22, 0x02	; 2
     968:	09 f4       	brne	.+2      	; 0x96c <DIO_InitPin+0x18>
     96a:	a1 c0       	rjmp	.+322    	; 0xaae <DIO_InitPin+0x15a>
     96c:	08 95       	ret
     96e:	91 30       	cpi	r25, 0x01	; 1
     970:	c1 f0       	breq	.+48     	; 0x9a2 <DIO_InitPin+0x4e>
     972:	28 f0       	brcs	.+10     	; 0x97e <DIO_InitPin+0x2a>
     974:	92 30       	cpi	r25, 0x02	; 2
     976:	39 f1       	breq	.+78     	; 0x9c6 <DIO_InitPin+0x72>
     978:	93 30       	cpi	r25, 0x03	; 3
     97a:	b9 f1       	breq	.+110    	; 0x9ea <DIO_InitPin+0x96>
     97c:	08 95       	ret
     97e:	4a b3       	in	r20, 0x1a	; 26
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	b9 01       	movw	r22, r18
     986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_InitPin+0x38>
     988:	66 0f       	add	r22, r22
     98a:	77 1f       	adc	r23, r23
     98c:	8a 95       	dec	r24
     98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_InitPin+0x34>
     990:	cb 01       	movw	r24, r22
     992:	94 2f       	mov	r25, r20
     994:	98 2b       	or	r25, r24
     996:	9a bb       	out	0x1a, r25	; 26
     998:	9b b3       	in	r25, 0x1b	; 27
     99a:	80 95       	com	r24
     99c:	89 23       	and	r24, r25
     99e:	8b bb       	out	0x1b, r24	; 27
     9a0:	08 95       	ret
     9a2:	47 b3       	in	r20, 0x17	; 23
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	b9 01       	movw	r22, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_InitPin+0x5c>
     9ac:	66 0f       	add	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	8a 95       	dec	r24
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_InitPin+0x58>
     9b4:	cb 01       	movw	r24, r22
     9b6:	94 2f       	mov	r25, r20
     9b8:	98 2b       	or	r25, r24
     9ba:	97 bb       	out	0x17, r25	; 23
     9bc:	98 b3       	in	r25, 0x18	; 24
     9be:	80 95       	com	r24
     9c0:	89 23       	and	r24, r25
     9c2:	88 bb       	out	0x18, r24	; 24
     9c4:	08 95       	ret
     9c6:	44 b3       	in	r20, 0x14	; 20
     9c8:	21 e0       	ldi	r18, 0x01	; 1
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	b9 01       	movw	r22, r18
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <DIO_InitPin+0x80>
     9d0:	66 0f       	add	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	8a 95       	dec	r24
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <DIO_InitPin+0x7c>
     9d8:	cb 01       	movw	r24, r22
     9da:	94 2f       	mov	r25, r20
     9dc:	98 2b       	or	r25, r24
     9de:	94 bb       	out	0x14, r25	; 20
     9e0:	95 b3       	in	r25, 0x15	; 21
     9e2:	80 95       	com	r24
     9e4:	89 23       	and	r24, r25
     9e6:	85 bb       	out	0x15, r24	; 21
     9e8:	08 95       	ret
     9ea:	41 b3       	in	r20, 0x11	; 17
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	b9 01       	movw	r22, r18
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_InitPin+0xa4>
     9f4:	66 0f       	add	r22, r22
     9f6:	77 1f       	adc	r23, r23
     9f8:	8a 95       	dec	r24
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_InitPin+0xa0>
     9fc:	cb 01       	movw	r24, r22
     9fe:	94 2f       	mov	r25, r20
     a00:	98 2b       	or	r25, r24
     a02:	91 bb       	out	0x11, r25	; 17
     a04:	92 b3       	in	r25, 0x12	; 18
     a06:	80 95       	com	r24
     a08:	89 23       	and	r24, r25
     a0a:	82 bb       	out	0x12, r24	; 18
     a0c:	08 95       	ret
     a0e:	91 30       	cpi	r25, 0x01	; 1
     a10:	c1 f0       	breq	.+48     	; 0xa42 <DIO_InitPin+0xee>
     a12:	28 f0       	brcs	.+10     	; 0xa1e <DIO_InitPin+0xca>
     a14:	92 30       	cpi	r25, 0x02	; 2
     a16:	39 f1       	breq	.+78     	; 0xa66 <DIO_InitPin+0x112>
     a18:	93 30       	cpi	r25, 0x03	; 3
     a1a:	b9 f1       	breq	.+110    	; 0xa8a <DIO_InitPin+0x136>
     a1c:	08 95       	ret
     a1e:	4a b3       	in	r20, 0x1a	; 26
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	b9 01       	movw	r22, r18
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_InitPin+0xd8>
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	8a 95       	dec	r24
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_InitPin+0xd4>
     a30:	cb 01       	movw	r24, r22
     a32:	80 95       	com	r24
     a34:	94 2f       	mov	r25, r20
     a36:	98 23       	and	r25, r24
     a38:	9a bb       	out	0x1a, r25	; 26
     a3a:	9b b3       	in	r25, 0x1b	; 27
     a3c:	89 23       	and	r24, r25
     a3e:	8b bb       	out	0x1b, r24	; 27
     a40:	08 95       	ret
     a42:	47 b3       	in	r20, 0x17	; 23
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	b9 01       	movw	r22, r18
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <DIO_InitPin+0xfc>
     a4c:	66 0f       	add	r22, r22
     a4e:	77 1f       	adc	r23, r23
     a50:	8a 95       	dec	r24
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <DIO_InitPin+0xf8>
     a54:	cb 01       	movw	r24, r22
     a56:	80 95       	com	r24
     a58:	94 2f       	mov	r25, r20
     a5a:	98 23       	and	r25, r24
     a5c:	97 bb       	out	0x17, r25	; 23
     a5e:	98 b3       	in	r25, 0x18	; 24
     a60:	89 23       	and	r24, r25
     a62:	88 bb       	out	0x18, r24	; 24
     a64:	08 95       	ret
     a66:	44 b3       	in	r20, 0x14	; 20
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	b9 01       	movw	r22, r18
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_InitPin+0x120>
     a70:	66 0f       	add	r22, r22
     a72:	77 1f       	adc	r23, r23
     a74:	8a 95       	dec	r24
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_InitPin+0x11c>
     a78:	cb 01       	movw	r24, r22
     a7a:	80 95       	com	r24
     a7c:	94 2f       	mov	r25, r20
     a7e:	98 23       	and	r25, r24
     a80:	94 bb       	out	0x14, r25	; 20
     a82:	95 b3       	in	r25, 0x15	; 21
     a84:	89 23       	and	r24, r25
     a86:	85 bb       	out	0x15, r24	; 21
     a88:	08 95       	ret
     a8a:	41 b3       	in	r20, 0x11	; 17
     a8c:	21 e0       	ldi	r18, 0x01	; 1
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	b9 01       	movw	r22, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_InitPin+0x144>
     a94:	66 0f       	add	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	8a 95       	dec	r24
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_InitPin+0x140>
     a9c:	cb 01       	movw	r24, r22
     a9e:	80 95       	com	r24
     aa0:	94 2f       	mov	r25, r20
     aa2:	98 23       	and	r25, r24
     aa4:	91 bb       	out	0x11, r25	; 17
     aa6:	92 b3       	in	r25, 0x12	; 18
     aa8:	89 23       	and	r24, r25
     aaa:	82 bb       	out	0x12, r24	; 18
     aac:	08 95       	ret
     aae:	91 30       	cpi	r25, 0x01	; 1
     ab0:	c1 f0       	breq	.+48     	; 0xae2 <DIO_InitPin+0x18e>
     ab2:	28 f0       	brcs	.+10     	; 0xabe <DIO_InitPin+0x16a>
     ab4:	92 30       	cpi	r25, 0x02	; 2
     ab6:	39 f1       	breq	.+78     	; 0xb06 <DIO_InitPin+0x1b2>
     ab8:	93 30       	cpi	r25, 0x03	; 3
     aba:	b9 f1       	breq	.+110    	; 0xb2a <DIO_InitPin+0x1d6>
     abc:	08 95       	ret
     abe:	4a b3       	in	r20, 0x1a	; 26
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	b9 01       	movw	r22, r18
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_InitPin+0x178>
     ac8:	66 0f       	add	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	8a 95       	dec	r24
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_InitPin+0x174>
     ad0:	cb 01       	movw	r24, r22
     ad2:	96 2f       	mov	r25, r22
     ad4:	90 95       	com	r25
     ad6:	94 23       	and	r25, r20
     ad8:	9a bb       	out	0x1a, r25	; 26
     ada:	9b b3       	in	r25, 0x1b	; 27
     adc:	89 2b       	or	r24, r25
     ade:	8b bb       	out	0x1b, r24	; 27
     ae0:	08 95       	ret
     ae2:	47 b3       	in	r20, 0x17	; 23
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	b9 01       	movw	r22, r18
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <DIO_InitPin+0x19c>
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	8a 95       	dec	r24
     af2:	e2 f7       	brpl	.-8      	; 0xaec <DIO_InitPin+0x198>
     af4:	cb 01       	movw	r24, r22
     af6:	96 2f       	mov	r25, r22
     af8:	90 95       	com	r25
     afa:	94 23       	and	r25, r20
     afc:	97 bb       	out	0x17, r25	; 23
     afe:	98 b3       	in	r25, 0x18	; 24
     b00:	89 2b       	or	r24, r25
     b02:	88 bb       	out	0x18, r24	; 24
     b04:	08 95       	ret
     b06:	44 b3       	in	r20, 0x14	; 20
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	b9 01       	movw	r22, r18
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_InitPin+0x1c0>
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_InitPin+0x1bc>
     b18:	cb 01       	movw	r24, r22
     b1a:	96 2f       	mov	r25, r22
     b1c:	90 95       	com	r25
     b1e:	94 23       	and	r25, r20
     b20:	94 bb       	out	0x14, r25	; 20
     b22:	95 b3       	in	r25, 0x15	; 21
     b24:	89 2b       	or	r24, r25
     b26:	85 bb       	out	0x15, r24	; 21
     b28:	08 95       	ret
     b2a:	41 b3       	in	r20, 0x11	; 17
     b2c:	21 e0       	ldi	r18, 0x01	; 1
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	b9 01       	movw	r22, r18
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <DIO_InitPin+0x1e4>
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	8a 95       	dec	r24
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <DIO_InitPin+0x1e0>
     b3c:	cb 01       	movw	r24, r22
     b3e:	96 2f       	mov	r25, r22
     b40:	90 95       	com	r25
     b42:	94 23       	and	r25, r20
     b44:	91 bb       	out	0x11, r25	; 17
     b46:	92 b3       	in	r25, 0x12	; 18
     b48:	89 2b       	or	r24, r25
     b4a:	82 bb       	out	0x12, r24	; 18
     b4c:	08 95       	ret

00000b4e <DIO_Init>:
     b4e:	cf 93       	push	r28
     b50:	c0 e0       	ldi	r28, 0x00	; 0
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <DIO_Init+0x18>
     b54:	ec 2f       	mov	r30, r28
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	eb 54       	subi	r30, 0x4B	; 75
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	60 81       	ld	r22, Z
     b5e:	8c 2f       	mov	r24, r28
     b60:	0e 94 aa 04 	call	0x954	; 0x954 <DIO_InitPin>
     b64:	cf 5f       	subi	r28, 0xFF	; 255
     b66:	c0 32       	cpi	r28, 0x20	; 32
     b68:	a8 f3       	brcs	.-22     	; 0xb54 <DIO_Init+0x6>
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <DIO_WritePin>:
     b6e:	98 2f       	mov	r25, r24
     b70:	96 95       	lsr	r25
     b72:	96 95       	lsr	r25
     b74:	96 95       	lsr	r25
     b76:	87 70       	andi	r24, 0x07	; 7
     b78:	66 23       	and	r22, r22
     b7a:	09 f4       	brne	.+2      	; 0xb7e <DIO_WritePin+0x10>
     b7c:	3f c0       	rjmp	.+126    	; 0xbfc <DIO_WritePin+0x8e>
     b7e:	61 30       	cpi	r22, 0x01	; 1
     b80:	09 f0       	breq	.+2      	; 0xb84 <DIO_WritePin+0x16>
     b82:	7b c0       	rjmp	.+246    	; 0xc7a <DIO_WritePin+0x10c>
     b84:	91 30       	cpi	r25, 0x01	; 1
     b86:	99 f0       	breq	.+38     	; 0xbae <DIO_WritePin+0x40>
     b88:	28 f0       	brcs	.+10     	; 0xb94 <DIO_WritePin+0x26>
     b8a:	92 30       	cpi	r25, 0x02	; 2
     b8c:	e9 f0       	breq	.+58     	; 0xbc8 <DIO_WritePin+0x5a>
     b8e:	93 30       	cpi	r25, 0x03	; 3
     b90:	41 f1       	breq	.+80     	; 0xbe2 <DIO_WritePin+0x74>
     b92:	08 95       	ret
     b94:	4b b3       	in	r20, 0x1b	; 27
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	b9 01       	movw	r22, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_WritePin+0x34>
     b9e:	66 0f       	add	r22, r22
     ba0:	77 1f       	adc	r23, r23
     ba2:	8a 95       	dec	r24
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_WritePin+0x30>
     ba6:	cb 01       	movw	r24, r22
     ba8:	84 2b       	or	r24, r20
     baa:	8b bb       	out	0x1b, r24	; 27
     bac:	08 95       	ret
     bae:	48 b3       	in	r20, 0x18	; 24
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	b9 01       	movw	r22, r18
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_WritePin+0x4e>
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	8a 95       	dec	r24
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <DIO_WritePin+0x4a>
     bc0:	cb 01       	movw	r24, r22
     bc2:	84 2b       	or	r24, r20
     bc4:	88 bb       	out	0x18, r24	; 24
     bc6:	08 95       	ret
     bc8:	45 b3       	in	r20, 0x15	; 21
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	b9 01       	movw	r22, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <DIO_WritePin+0x68>
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	8a 95       	dec	r24
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <DIO_WritePin+0x64>
     bda:	cb 01       	movw	r24, r22
     bdc:	84 2b       	or	r24, r20
     bde:	85 bb       	out	0x15, r24	; 21
     be0:	08 95       	ret
     be2:	42 b3       	in	r20, 0x12	; 18
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	b9 01       	movw	r22, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_WritePin+0x82>
     bec:	66 0f       	add	r22, r22
     bee:	77 1f       	adc	r23, r23
     bf0:	8a 95       	dec	r24
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_WritePin+0x7e>
     bf4:	cb 01       	movw	r24, r22
     bf6:	84 2b       	or	r24, r20
     bf8:	82 bb       	out	0x12, r24	; 18
     bfa:	08 95       	ret
     bfc:	91 30       	cpi	r25, 0x01	; 1
     bfe:	a1 f0       	breq	.+40     	; 0xc28 <DIO_WritePin+0xba>
     c00:	28 f0       	brcs	.+10     	; 0xc0c <DIO_WritePin+0x9e>
     c02:	92 30       	cpi	r25, 0x02	; 2
     c04:	f9 f0       	breq	.+62     	; 0xc44 <DIO_WritePin+0xd6>
     c06:	93 30       	cpi	r25, 0x03	; 3
     c08:	59 f1       	breq	.+86     	; 0xc60 <DIO_WritePin+0xf2>
     c0a:	08 95       	ret
     c0c:	4b b3       	in	r20, 0x1b	; 27
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	b9 01       	movw	r22, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_WritePin+0xac>
     c16:	66 0f       	add	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	8a 95       	dec	r24
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_WritePin+0xa8>
     c1e:	cb 01       	movw	r24, r22
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	8b bb       	out	0x1b, r24	; 27
     c26:	08 95       	ret
     c28:	48 b3       	in	r20, 0x18	; 24
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	b9 01       	movw	r22, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_WritePin+0xc8>
     c32:	66 0f       	add	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	8a 95       	dec	r24
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_WritePin+0xc4>
     c3a:	cb 01       	movw	r24, r22
     c3c:	80 95       	com	r24
     c3e:	84 23       	and	r24, r20
     c40:	88 bb       	out	0x18, r24	; 24
     c42:	08 95       	ret
     c44:	45 b3       	in	r20, 0x15	; 21
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	b9 01       	movw	r22, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_WritePin+0xe4>
     c4e:	66 0f       	add	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	8a 95       	dec	r24
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_WritePin+0xe0>
     c56:	cb 01       	movw	r24, r22
     c58:	80 95       	com	r24
     c5a:	84 23       	and	r24, r20
     c5c:	85 bb       	out	0x15, r24	; 21
     c5e:	08 95       	ret
     c60:	42 b3       	in	r20, 0x12	; 18
     c62:	21 e0       	ldi	r18, 0x01	; 1
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	b9 01       	movw	r22, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_WritePin+0x100>
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	8a 95       	dec	r24
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_WritePin+0xfc>
     c72:	cb 01       	movw	r24, r22
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	82 bb       	out	0x12, r24	; 18
     c7a:	08 95       	ret

00000c7c <DIO_ReadPin>:
//notice the type returned from the function it is a value from HIGH,LOW from enum in DIO_interface


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
	DIO_Port_type port= pin/8;
     c7c:	98 2f       	mov	r25, r24
     c7e:	96 95       	lsr	r25
     c80:	96 95       	lsr	r25
     c82:	96 95       	lsr	r25
	u8 pin_num=pin%8;
     c84:	48 2f       	mov	r20, r24
     c86:	47 70       	andi	r20, 0x07	; 7
	DIO_PinVoltage_type volt=LOW;
	switch(port)
     c88:	91 30       	cpi	r25, 0x01	; 1
     c8a:	81 f0       	breq	.+32     	; 0xcac <DIO_ReadPin+0x30>
     c8c:	28 f0       	brcs	.+10     	; 0xc98 <DIO_ReadPin+0x1c>
     c8e:	92 30       	cpi	r25, 0x02	; 2
     c90:	b9 f0       	breq	.+46     	; 0xcc0 <DIO_ReadPin+0x44>
     c92:	93 30       	cpi	r25, 0x03	; 3
     c94:	f9 f0       	breq	.+62     	; 0xcd4 <DIO_ReadPin+0x58>
     c96:	28 c0       	rjmp	.+80     	; 0xce8 <DIO_ReadPin+0x6c>
	{
		case PA:
		volt=READ_BIT(PINA,pin_num);
     c98:	99 b3       	in	r25, 0x19	; 25
     c9a:	89 2f       	mov	r24, r25
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_ReadPin+0x28>
     ca0:	95 95       	asr	r25
     ca2:	87 95       	ror	r24
     ca4:	4a 95       	dec	r20
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_ReadPin+0x24>
     ca8:	81 70       	andi	r24, 0x01	; 1
		break;
     caa:	08 95       	ret
		case PB:
		volt=READ_BIT(PINB,pin_num);
     cac:	26 b3       	in	r18, 0x16	; 22
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	c9 01       	movw	r24, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_ReadPin+0x3c>
     cb4:	95 95       	asr	r25
     cb6:	87 95       	ror	r24
     cb8:	4a 95       	dec	r20
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_ReadPin+0x38>
     cbc:	81 70       	andi	r24, 0x01	; 1
		break;
     cbe:	08 95       	ret
		case PC:
		volt=READ_BIT(PINC,pin_num);
     cc0:	23 b3       	in	r18, 0x13	; 19
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	c9 01       	movw	r24, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_ReadPin+0x50>
     cc8:	95 95       	asr	r25
     cca:	87 95       	ror	r24
     ccc:	4a 95       	dec	r20
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_ReadPin+0x4c>
     cd0:	81 70       	andi	r24, 0x01	; 1
		break;
     cd2:	08 95       	ret
		case PD:
		volt=READ_BIT(PIND,pin_num);
     cd4:	20 b3       	in	r18, 0x10	; 16
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	c9 01       	movw	r24, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_ReadPin+0x64>
     cdc:	95 95       	asr	r25
     cde:	87 95       	ror	r24
     ce0:	4a 95       	dec	r20
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_ReadPin+0x60>
     ce4:	81 70       	andi	r24, 0x01	; 1
		break;
     ce6:	08 95       	ret

DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
	DIO_Port_type port= pin/8;
	u8 pin_num=pin%8;
	DIO_PinVoltage_type volt=LOW;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	
	return volt;

}
     cea:	08 95       	ret

00000cec <DIO_TogglePin>:


//the next function toggles a pin
void DIO_TogglePin(DIO_Pin_type pin)
{
	DIO_Port_type port= pin/8;
     cec:	98 2f       	mov	r25, r24
     cee:	96 95       	lsr	r25
     cf0:	96 95       	lsr	r25
     cf2:	96 95       	lsr	r25
	u8 pin_num=pin%8;
     cf4:	87 70       	andi	r24, 0x07	; 7
	switch(port)
     cf6:	91 30       	cpi	r25, 0x01	; 1
     cf8:	99 f0       	breq	.+38     	; 0xd20 <DIO_TogglePin+0x34>
     cfa:	28 f0       	brcs	.+10     	; 0xd06 <DIO_TogglePin+0x1a>
     cfc:	92 30       	cpi	r25, 0x02	; 2
     cfe:	e9 f0       	breq	.+58     	; 0xd3a <DIO_TogglePin+0x4e>
     d00:	93 30       	cpi	r25, 0x03	; 3
     d02:	41 f1       	breq	.+80     	; 0xd54 <DIO_TogglePin+0x68>
     d04:	08 95       	ret
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
     d06:	4b b3       	in	r20, 0x1b	; 27
     d08:	21 e0       	ldi	r18, 0x01	; 1
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	b9 01       	movw	r22, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_TogglePin+0x28>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	8a 95       	dec	r24
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_TogglePin+0x24>
     d18:	cb 01       	movw	r24, r22
     d1a:	84 27       	eor	r24, r20
     d1c:	8b bb       	out	0x1b, r24	; 27
		break;
     d1e:	08 95       	ret
		case PB:
		TOG_BIT(PORTB,pin_num);
     d20:	48 b3       	in	r20, 0x18	; 24
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	b9 01       	movw	r22, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_TogglePin+0x42>
     d2a:	66 0f       	add	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	8a 95       	dec	r24
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_TogglePin+0x3e>
     d32:	cb 01       	movw	r24, r22
     d34:	84 27       	eor	r24, r20
     d36:	88 bb       	out	0x18, r24	; 24
		break;
     d38:	08 95       	ret
		case PC:
		TOG_BIT(PORTC,pin_num);
     d3a:	45 b3       	in	r20, 0x15	; 21
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	b9 01       	movw	r22, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_TogglePin+0x5c>
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	8a 95       	dec	r24
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_TogglePin+0x58>
     d4c:	cb 01       	movw	r24, r22
     d4e:	84 27       	eor	r24, r20
     d50:	85 bb       	out	0x15, r24	; 21
		break;
     d52:	08 95       	ret
		case PD:
		TOG_BIT(PORTD,pin_num);
     d54:	42 b3       	in	r20, 0x12	; 18
     d56:	21 e0       	ldi	r18, 0x01	; 1
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	b9 01       	movw	r22, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_TogglePin+0x76>
     d5e:	66 0f       	add	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	8a 95       	dec	r24
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_TogglePin+0x72>
     d66:	cb 01       	movw	r24, r22
     d68:	84 27       	eor	r24, r20
     d6a:	82 bb       	out	0x12, r24	; 18
     d6c:	08 95       	ret

00000d6e <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,RISING_EDGE);
	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	41 f0       	breq	.+16     	; 0xd82 <EXI_Enable+0x14>
     d72:	18 f0       	brcs	.+6      	; 0xd7a <EXI_Enable+0xc>
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	49 f0       	breq	.+18     	; 0xd8a <EXI_Enable+0x1c>
     d78:	08 95       	ret
     d7a:	8b b7       	in	r24, 0x3b	; 59
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8b bf       	out	0x3b, r24	; 59
     d80:	08 95       	ret
     d82:	8b b7       	in	r24, 0x3b	; 59
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	8b bf       	out	0x3b, r24	; 59
     d88:	08 95       	ret
     d8a:	8b b7       	in	r24, 0x3b	; 59
     d8c:	80 62       	ori	r24, 0x20	; 32
     d8e:	8b bf       	out	0x3b, r24	; 59
     d90:	08 95       	ret

00000d92 <EXI_TriggerEdge>:
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	49 f1       	breq	.+82     	; 0xde8 <EXI_TriggerEdge+0x56>
     d96:	20 f0       	brcs	.+8      	; 0xda0 <EXI_TriggerEdge+0xe>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	09 f4       	brne	.+2      	; 0xd9e <EXI_TriggerEdge+0xc>
     d9c:	49 c0       	rjmp	.+146    	; 0xe30 <EXI_TriggerEdge+0x9e>
     d9e:	08 95       	ret
     da0:	61 30       	cpi	r22, 0x01	; 1
     da2:	69 f0       	breq	.+26     	; 0xdbe <EXI_TriggerEdge+0x2c>
     da4:	28 f0       	brcs	.+10     	; 0xdb0 <EXI_TriggerEdge+0x1e>
     da6:	62 30       	cpi	r22, 0x02	; 2
     da8:	89 f0       	breq	.+34     	; 0xdcc <EXI_TriggerEdge+0x3a>
     daa:	63 30       	cpi	r22, 0x03	; 3
     dac:	b1 f0       	breq	.+44     	; 0xdda <EXI_TriggerEdge+0x48>
     dae:	08 95       	ret
     db0:	85 b7       	in	r24, 0x35	; 53
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	85 bf       	out	0x35, r24	; 53
     db6:	85 b7       	in	r24, 0x35	; 53
     db8:	8d 7f       	andi	r24, 0xFD	; 253
     dba:	85 bf       	out	0x35, r24	; 53
     dbc:	08 95       	ret
     dbe:	85 b7       	in	r24, 0x35	; 53
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	85 bf       	out	0x35, r24	; 53
     dc4:	85 b7       	in	r24, 0x35	; 53
     dc6:	8d 7f       	andi	r24, 0xFD	; 253
     dc8:	85 bf       	out	0x35, r24	; 53
     dca:	08 95       	ret
     dcc:	85 b7       	in	r24, 0x35	; 53
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	85 bf       	out	0x35, r24	; 53
     dd2:	85 b7       	in	r24, 0x35	; 53
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	85 bf       	out	0x35, r24	; 53
     dd8:	08 95       	ret
     dda:	85 b7       	in	r24, 0x35	; 53
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	85 bf       	out	0x35, r24	; 53
     de0:	85 b7       	in	r24, 0x35	; 53
     de2:	82 60       	ori	r24, 0x02	; 2
     de4:	85 bf       	out	0x35, r24	; 53
     de6:	08 95       	ret
     de8:	61 30       	cpi	r22, 0x01	; 1
     dea:	69 f0       	breq	.+26     	; 0xe06 <EXI_TriggerEdge+0x74>
     dec:	28 f0       	brcs	.+10     	; 0xdf8 <EXI_TriggerEdge+0x66>
     dee:	62 30       	cpi	r22, 0x02	; 2
     df0:	89 f0       	breq	.+34     	; 0xe14 <EXI_TriggerEdge+0x82>
     df2:	63 30       	cpi	r22, 0x03	; 3
     df4:	b1 f0       	breq	.+44     	; 0xe22 <EXI_TriggerEdge+0x90>
     df6:	08 95       	ret
     df8:	85 b7       	in	r24, 0x35	; 53
     dfa:	8b 7f       	andi	r24, 0xFB	; 251
     dfc:	85 bf       	out	0x35, r24	; 53
     dfe:	85 b7       	in	r24, 0x35	; 53
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	85 bf       	out	0x35, r24	; 53
     e04:	08 95       	ret
     e06:	85 b7       	in	r24, 0x35	; 53
     e08:	84 60       	ori	r24, 0x04	; 4
     e0a:	85 bf       	out	0x35, r24	; 53
     e0c:	85 b7       	in	r24, 0x35	; 53
     e0e:	87 7f       	andi	r24, 0xF7	; 247
     e10:	85 bf       	out	0x35, r24	; 53
     e12:	08 95       	ret
     e14:	85 b7       	in	r24, 0x35	; 53
     e16:	8b 7f       	andi	r24, 0xFB	; 251
     e18:	85 bf       	out	0x35, r24	; 53
     e1a:	85 b7       	in	r24, 0x35	; 53
     e1c:	88 60       	ori	r24, 0x08	; 8
     e1e:	85 bf       	out	0x35, r24	; 53
     e20:	08 95       	ret
     e22:	85 b7       	in	r24, 0x35	; 53
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	85 bf       	out	0x35, r24	; 53
     e28:	85 b7       	in	r24, 0x35	; 53
     e2a:	88 60       	ori	r24, 0x08	; 8
     e2c:	85 bf       	out	0x35, r24	; 53
     e2e:	08 95       	ret
     e30:	62 30       	cpi	r22, 0x02	; 2
     e32:	19 f0       	breq	.+6      	; 0xe3a <EXI_TriggerEdge+0xa8>
     e34:	63 30       	cpi	r22, 0x03	; 3
     e36:	29 f0       	breq	.+10     	; 0xe42 <EXI_TriggerEdge+0xb0>
     e38:	08 c0       	rjmp	.+16     	; 0xe4a <EXI_TriggerEdge+0xb8>
     e3a:	84 b7       	in	r24, 0x34	; 52
     e3c:	8f 7b       	andi	r24, 0xBF	; 191
     e3e:	84 bf       	out	0x34, r24	; 52
     e40:	08 95       	ret
     e42:	84 b7       	in	r24, 0x34	; 52
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	84 bf       	out	0x34, r24	; 52
     e48:	08 95       	ret
     e4a:	84 b7       	in	r24, 0x34	; 52
     e4c:	8f 7b       	andi	r24, 0xBF	; 191
     e4e:	84 bf       	out	0x34, r24	; 52
     e50:	08 95       	ret

00000e52 <EXI_SetCallBack>:
	}
}

void EXI_SetCallBack(ExInterruptSource_type Interrupt,void (*LocalPtr)(void))
{
	switch(Interrupt)
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	49 f0       	breq	.+18     	; 0xe68 <EXI_SetCallBack+0x16>
     e56:	18 f0       	brcs	.+6      	; 0xe5e <EXI_SetCallBack+0xc>
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	59 f0       	breq	.+22     	; 0xe72 <EXI_SetCallBack+0x20>
     e5c:	08 95       	ret
	{
		case EX_INT0:
		INT0_Fptr=LocalPtr;
     e5e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <INT0_Fptr+0x1>
     e62:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <INT0_Fptr>
		break;
     e66:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
     e68:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <INT1_Fptr+0x1>
     e6c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <INT1_Fptr>
		break;
     e70:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
     e72:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <INT2_Fptr+0x1>
     e76:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <INT2_Fptr>
     e7a:	08 95       	ret

00000e7c <__vector_1>:
		break;
	}
	
}
ISR(INT0_vect)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
	if(INT0_Fptr!=(NULLPTR))		// if the Pointer is initialized by null then don't execute the function INT0_Fptr()
     e9e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <INT0_Fptr>
     ea2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <INT0_Fptr+0x1>
     ea6:	30 97       	sbiw	r30, 0x00	; 0
     ea8:	09 f0       	breq	.+2      	; 0xeac <__vector_1+0x30>
	{
		INT0_Fptr();
     eaa:	09 95       	icall
	}
}
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_2>:

ISR(INT1_vect)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
	if(INT1_Fptr!=(NULLPTR))
     ef0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <INT1_Fptr>
     ef4:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <INT1_Fptr+0x1>
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <__vector_2+0x30>
	{
		INT1_Fptr();
     efc:	09 95       	icall
	}
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_3>:

ISR(INT2_vect)
{
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
	if(INT2_Fptr!=(NULLPTR))
     f42:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <INT2_Fptr>
     f46:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <INT2_Fptr+0x1>
     f4a:	30 97       	sbiw	r30, 0x00	; 0
     f4c:	09 f0       	breq	.+2      	; 0xf50 <__vector_3+0x30>
	{
		INT2_Fptr();
     f4e:	09 95       	icall
	}
	
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <Timer1_Init>:
{
	Timer2_OVF_Fptr=LocalFptr;
}
void Timer2_OC_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OC_Fptr=LocalFptr;
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	29 f1       	breq	.+74     	; 0xfc0 <Timer1_Init+0x4e>
     f76:	28 f4       	brcc	.+10     	; 0xf82 <Timer1_Init+0x10>
     f78:	88 23       	and	r24, r24
     f7a:	41 f0       	breq	.+16     	; 0xf8c <Timer1_Init+0x1a>
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	99 f0       	breq	.+38     	; 0xfa6 <Timer1_Init+0x34>
     f80:	45 c0       	rjmp	.+138    	; 0x100c <Timer1_Init+0x9a>
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	51 f1       	breq	.+84     	; 0xfda <Timer1_Init+0x68>
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	a9 f1       	breq	.+106    	; 0xff4 <Timer1_Init+0x82>
     f8a:	40 c0       	rjmp	.+128    	; 0x100c <Timer1_Init+0x9a>
     f8c:	8f b5       	in	r24, 0x2f	; 47
     f8e:	8e 7f       	andi	r24, 0xFE	; 254
     f90:	8f bd       	out	0x2f, r24	; 47
     f92:	8f b5       	in	r24, 0x2f	; 47
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	8f bd       	out	0x2f, r24	; 47
     f98:	8e b5       	in	r24, 0x2e	; 46
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8e bd       	out	0x2e, r24	; 46
     f9e:	8e b5       	in	r24, 0x2e	; 46
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	8e bd       	out	0x2e, r24	; 46
     fa4:	33 c0       	rjmp	.+102    	; 0x100c <Timer1_Init+0x9a>
     fa6:	8f b5       	in	r24, 0x2f	; 47
     fa8:	8e 7f       	andi	r24, 0xFE	; 254
     faa:	8f bd       	out	0x2f, r24	; 47
     fac:	8f b5       	in	r24, 0x2f	; 47
     fae:	8d 7f       	andi	r24, 0xFD	; 253
     fb0:	8f bd       	out	0x2f, r24	; 47
     fb2:	8e b5       	in	r24, 0x2e	; 46
     fb4:	88 60       	ori	r24, 0x08	; 8
     fb6:	8e bd       	out	0x2e, r24	; 46
     fb8:	8e b5       	in	r24, 0x2e	; 46
     fba:	80 61       	ori	r24, 0x10	; 16
     fbc:	8e bd       	out	0x2e, r24	; 46
     fbe:	26 c0       	rjmp	.+76     	; 0x100c <Timer1_Init+0x9a>
     fc0:	8f b5       	in	r24, 0x2f	; 47
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	8f bd       	out	0x2f, r24	; 47
     fc6:	8f b5       	in	r24, 0x2f	; 47
     fc8:	8d 7f       	andi	r24, 0xFD	; 253
     fca:	8f bd       	out	0x2f, r24	; 47
     fcc:	8e b5       	in	r24, 0x2e	; 46
     fce:	88 60       	ori	r24, 0x08	; 8
     fd0:	8e bd       	out	0x2e, r24	; 46
     fd2:	8e b5       	in	r24, 0x2e	; 46
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	8e bd       	out	0x2e, r24	; 46
     fd8:	19 c0       	rjmp	.+50     	; 0x100c <Timer1_Init+0x9a>
     fda:	8f b5       	in	r24, 0x2f	; 47
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	8f bd       	out	0x2f, r24	; 47
     fe0:	8f b5       	in	r24, 0x2f	; 47
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8f bd       	out	0x2f, r24	; 47
     fe6:	8e b5       	in	r24, 0x2e	; 46
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	8e bd       	out	0x2e, r24	; 46
     fec:	8e b5       	in	r24, 0x2e	; 46
     fee:	80 61       	ori	r24, 0x10	; 16
     ff0:	8e bd       	out	0x2e, r24	; 46
     ff2:	0c c0       	rjmp	.+24     	; 0x100c <Timer1_Init+0x9a>
     ff4:	8f b5       	in	r24, 0x2f	; 47
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	8f bd       	out	0x2f, r24	; 47
     ffa:	8f b5       	in	r24, 0x2f	; 47
     ffc:	82 60       	ori	r24, 0x02	; 2
     ffe:	8f bd       	out	0x2f, r24	; 47
    1000:	8e b5       	in	r24, 0x2e	; 46
    1002:	88 60       	ori	r24, 0x08	; 8
    1004:	8e bd       	out	0x2e, r24	; 46
    1006:	8e b5       	in	r24, 0x2e	; 46
    1008:	80 61       	ori	r24, 0x10	; 16
    100a:	8e bd       	out	0x2e, r24	; 46
    100c:	8e b5       	in	r24, 0x2e	; 46
    100e:	88 7f       	andi	r24, 0xF8	; 248
    1010:	8e bd       	out	0x2e, r24	; 46
    1012:	8e b5       	in	r24, 0x2e	; 46
    1014:	68 2b       	or	r22, r24
    1016:	6e bd       	out	0x2e, r22	; 46
    1018:	08 95       	ret

0000101a <Timer1_OCA_InterruptEnable>:
    101a:	89 b7       	in	r24, 0x39	; 57
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	89 bf       	out	0x39, r24	; 57
    1020:	08 95       	ret

00001022 <Timer1_OCA_SetCallBack>:
    1022:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Timer1_OCA_Fptr+0x1>
    1026:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Timer1_OCA_Fptr>
    102a:	08 95       	ret

0000102c <__vector_9>:
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <Timer1_OVF_Fptr>
    1052:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <Timer1_OVF_Fptr+0x1>
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	09 f0       	breq	.+2      	; 0x105c <__vector_9+0x30>
    105a:	09 95       	icall
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <__vector_7>:
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	2f 93       	push	r18
    108a:	3f 93       	push	r19
    108c:	4f 93       	push	r20
    108e:	5f 93       	push	r21
    1090:	6f 93       	push	r22
    1092:	7f 93       	push	r23
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	af 93       	push	r26
    109a:	bf 93       	push	r27
    109c:	ef 93       	push	r30
    109e:	ff 93       	push	r31
    10a0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Timer1_OCA_Fptr>
    10a4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <Timer1_OCA_Fptr+0x1>
    10a8:	30 97       	sbiw	r30, 0x00	; 0
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__vector_7+0x30>
    10ac:	09 95       	icall
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_8>:
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    10f2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <Timer1_OCB_Fptr>
    10f6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <Timer1_OCB_Fptr+0x1>
    10fa:	30 97       	sbiw	r30, 0x00	; 0
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__vector_8+0x30>
    10fe:	09 95       	icall
    1100:	ff 91       	pop	r31
    1102:	ef 91       	pop	r30
    1104:	bf 91       	pop	r27
    1106:	af 91       	pop	r26
    1108:	9f 91       	pop	r25
    110a:	8f 91       	pop	r24
    110c:	7f 91       	pop	r23
    110e:	6f 91       	pop	r22
    1110:	5f 91       	pop	r21
    1112:	4f 91       	pop	r20
    1114:	3f 91       	pop	r19
    1116:	2f 91       	pop	r18
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__vector_6>:
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
    1144:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <Timer1_ICU_Fptr>
    1148:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <Timer1_ICU_Fptr+0x1>
    114c:	30 97       	sbiw	r30, 0x00	; 0
    114e:	09 f0       	breq	.+2      	; 0x1152 <__vector_6+0x30>
    1150:	09 95       	icall
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_5>:
}


/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER2_OVF_vect)
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    1196:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <Timer2_OVF_Fptr>
    119a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <Timer2_OVF_Fptr+0x1>
    119e:	30 97       	sbiw	r30, 0x00	; 0
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    11a2:	09 95       	icall
	}
}
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
	if(Timer2_OC_Fptr!=NULLPTR)
    11e8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <Timer2_OC_Fptr>
    11ec:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <Timer2_OC_Fptr+0x1>
    11f0:	30 97       	sbiw	r30, 0x00	; 0
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__vector_4+0x30>
	{
		Timer2_OC_Fptr();
    11f4:	09 95       	icall
	}
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <Timer1_Count_1ms>:
	Timer1_OCA_SetCallBack(LocalFptr);
	Timer1_OCA_InterruptEnable();
}

void Timer1_Count_1ms(void(*LocalFptr)(void))
{
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE,TIMER1_SCALER_8);
    121e:	62 e0       	ldi	r22, 0x02	; 2
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	0e 94 b9 07 	call	0xf72	; 0xf72 <Timer1_Init>
	OCR1A=120;
    1226:	88 e7       	ldi	r24, 0x78	; 120
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9b bd       	out	0x2b, r25	; 43
    122c:	8a bd       	out	0x2a, r24	; 42
	Timer1_OCA_SetCallBack(LocalFptr);
    122e:	ce 01       	movw	r24, r28
    1230:	0e 94 11 08 	call	0x1022	; 0x1022 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();
    1234:	0e 94 0d 08 	call	0x101a	; 0x101a <Timer1_OCA_InterruptEnable>
}
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <Timer1_reset>:
void Timer1_reset(void)
{
	TCNT1=0;
    123e:	1d bc       	out	0x2d, r1	; 45
    1240:	1c bc       	out	0x2c, r1	; 44
    1242:	08 95       	ret

00001244 <__udivmodsi4>:
    1244:	a1 e2       	ldi	r26, 0x21	; 33
    1246:	1a 2e       	mov	r1, r26
    1248:	aa 1b       	sub	r26, r26
    124a:	bb 1b       	sub	r27, r27
    124c:	fd 01       	movw	r30, r26
    124e:	0d c0       	rjmp	.+26     	; 0x126a <__udivmodsi4_ep>

00001250 <__udivmodsi4_loop>:
    1250:	aa 1f       	adc	r26, r26
    1252:	bb 1f       	adc	r27, r27
    1254:	ee 1f       	adc	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	a2 17       	cp	r26, r18
    125a:	b3 07       	cpc	r27, r19
    125c:	e4 07       	cpc	r30, r20
    125e:	f5 07       	cpc	r31, r21
    1260:	20 f0       	brcs	.+8      	; 0x126a <__udivmodsi4_ep>
    1262:	a2 1b       	sub	r26, r18
    1264:	b3 0b       	sbc	r27, r19
    1266:	e4 0b       	sbc	r30, r20
    1268:	f5 0b       	sbc	r31, r21

0000126a <__udivmodsi4_ep>:
    126a:	66 1f       	adc	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	1a 94       	dec	r1
    1274:	69 f7       	brne	.-38     	; 0x1250 <__udivmodsi4_loop>
    1276:	60 95       	com	r22
    1278:	70 95       	com	r23
    127a:	80 95       	com	r24
    127c:	90 95       	com	r25
    127e:	9b 01       	movw	r18, r22
    1280:	ac 01       	movw	r20, r24
    1282:	bd 01       	movw	r22, r26
    1284:	cf 01       	movw	r24, r30
    1286:	08 95       	ret

00001288 <_exit>:
    1288:	f8 94       	cli

0000128a <__stop_program>:
    128a:	ff cf       	rjmp	.-2      	; 0x128a <__stop_program>
